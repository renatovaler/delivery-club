name: SonarCloud Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  sonarcloud:
    name: üîç SonarCloud
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: üíæ Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: üíæ Cache npm packages
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: üì• Install Dependencies
        run: |
          npm ci
          cd new-frontend && npm ci
          cd ../backend && npm ci

      - name: üß™ Run Tests with Coverage
        run: |
          cd new-frontend && npm run test:coverage
          cd ../backend && npm run test:coverage

      - name: üîç SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.branch.name=${{ github.ref_name }}
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}

      - name: üìä SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt

      - name: üìß Notify on Quality Gate Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: danger
          SLACK_MESSAGE: '‚ùå Quality Gate falhou na an√°lise do SonarCloud!'
          SLACK_TITLE: SonarCloud Analysis
          SLACK_USERNAME: SonarCloud Bot
          SLACK_ICON_EMOJI: ':warning:'

      - name: üìù Create Issue on Quality Gate Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const reportPath = '.scannerwork/report-task.txt';
            
            if (fs.existsSync(reportPath)) {
              const report = fs.readFileSync(reportPath, 'utf8');
              const dashboardUrl = report.match(/dashboardUrl=(.*)/)[1];
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '‚ùå Quality Gate Falhou na An√°lise do SonarCloud',
                body: `
                  ## Falha no Quality Gate
                  
                  A an√°lise do SonarCloud falhou no Quality Gate.
                  
                  ### Links Importantes
                  - [Dashboard do SonarCloud](${dashboardUrl})
                  - [Execu√ß√£o do Workflow](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
                  
                  Por favor, revise os problemas encontrados e fa√ßa as corre√ß√µes necess√°rias.
                `,
                labels: ['quality-gate', 'high-priority']
              });
            }

      - name: üìä Upload Analysis Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sonar-report
          path: .scannerwork/
          retention-days: 30
